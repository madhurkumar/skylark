{"name":"Skylark","tagline":"","body":"# Skylark\r\n\r\nSkylark is a set of libraries for quantitative and financial computation.\r\n\r\n## skylark-measure\r\n\r\n**skylark-measure** is a library dealing with unit-of-measure conversions in a type-safe manner. Many libraries provide similar functionality on \r\ntheir surface but in the end lack the richness and versatility necessary to use in real enterprise applications.\r\n\r\n```scala\r\nlibraryDependencies += \"com.quantarray\" %% \"skylark-measure\" % \"0.3.1\"\r\n```\r\n\r\nMany units of measure are defined for you.\r\n\r\n```scala\r\nkg\r\nlb\r\nPa\r\nHz\r\n```\r\n\r\nAny unit of measure will have a set of basic properties that you would naturally expect to interrogate.\r\n\r\n```scala\r\nkg.name should be(\"kg\")\r\nkg.dimension should be(Mass)\r\nkg.system should be(SI)\r\nkg.isStructuralAtom should be(right = true)\r\nkg.exponent should be(1.0)\r\nkg / lb should be(UnitMeasure)\r\nkg * s should be(ProductMeasure(kg, s))\r\nkg.inverse should be(ExponentialMeasure(kg, -1.0))\r\nkg to kg should be(Some(1))\r\nkg to lb should be(Some(2.204625))\r\nkg to g should be(Some(1000))\r\n```\r\n\r\nYou can take existing units and compose more complex ones by multiplying, dividing, and exponentiating.\r\n\r\n```scala\r\nkg * m / sec ^ 2\r\n```\r\n\r\nYou can find our the conversion factor from one *to* another.  No conversion factor may exist.\r\n\r\n```scala\r\n(kg to lb).value should be(2.204625)\r\n```\r\n\r\nToo many systems omit units of measure when storing or presenting numerical quantities. Now you can store units of measure along with a numeric value as a plain string.\r\nWith `MeasureParsers` you can turn that string back into a measure.\r\n \r\n```scala\r\nparseMeasure(\"USD / bbl\").get should equal(USD / bbl)\r\n```\r\n\r\nIt's easy to compose numerical quantities with units of measure using a dot or postfix syntax.\r\n\r\n```scala\r\n10.kg\r\n4 m\r\n1000.0.bbl\r\n```\r\n\r\nYou can perform the expected arithmetic operations on quantities.\r\n\r\n```scala\r\n10.0.kg * 4.0.m should equal(Quantity(40, kg * m))\r\n4.0.oz_troy * 7.0.percent should equal(Quantity(0.28, oz_troy))\r\n\r\n10.0.kg / 2.0.m should equal(Quantity(5, kg / m))\r\n10.0.USD / 2.0.percent should equal(Quantity(500, USD))\r\n\r\n10.0.kg + 3.0.kg should equal(13.0.kg)\r\n10.0.kg - 3.0.kg should equal(7.0.kg)\r\n10.0.kg + (3.0.lb to kg) should equal(11.360775642116007.kg)\r\n```\r\n\r\nQuantity conversions are also supported via the same `to` operator. Basic converters are pre-defined. Conversions for product, ratio, and exponential measures\r\nis defined by converters and require their own CanConvert instances of their components' conversions.\r\n\r\n```scala\r\n(1.0.ft to in) should equal(12.0 in)\r\n(12.0.in to ft) should equal(1.0 ft)\r\n```\r\n","google":"UA-61924022-3","note":"Don't delete this file! It's used internally to help with page regeneration."}